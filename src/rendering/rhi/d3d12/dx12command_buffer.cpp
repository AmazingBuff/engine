//
// Created by AmazingBuff on 2025/4/17.
//

#include "dx12command_buffer.h"
#include "dx12device.h"
#include "dx12command_pool.h"
#include "dx12root_signature.h"
#include "dx12compute_pipeline.h"
#include "dx12descriptor_set.h"
#include "dx12queue.h"
#include "dx12query_pool.h"
#include "dx12graphics_pass_encoder.h"
#include "dx12compute_pass_encoder.h"
#include "resources/dx12sampler.h"
#include "resources/dx12buffer.h"
#include "resources/dx12shader_library.h"
#include "resources/dx12texture.h"
#include "resources/dx12texture_view.h"
#include "utils/dx_macro.h"
#include "utils/dx_utils.h"

AMAZING_NAMESPACE_BEGIN

static constexpr uint8_t DX12_Mipmap_Shader[] =
{
    0x44, 0x58, 0x42, 0x43, 0x2D, 0x9B, 0xF3, 0x2B, 0x98, 0x28, 0xE6, 0x48,
    0xF6, 0x86, 0xF7, 0xE4, 0xCE, 0x67, 0xDE, 0x30, 0x01, 0x00, 0x00, 0x00,
    0xBC, 0x0F, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,
    0x4C, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00,
    0x24, 0x01, 0x00, 0x00, 0x60, 0x08, 0x00, 0x00, 0x7C, 0x08, 0x00, 0x00,
    0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4F, 0x53, 0x47, 0x31,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x50, 0x53, 0x56, 0x30, 0xB0, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x69, 0x70, 0x6D, 0x61, 0x70, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x41, 0x54, 0x34, 0x07, 0x00, 0x00,
    0x60, 0x00, 0x05, 0x00, 0xCD, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1C, 0x07, 0x00, 0x00,
    0x42, 0x43, 0xC0, 0xDE, 0x21, 0x0C, 0x00, 0x00, 0xC4, 0x01, 0x00, 0x00,
    0x0B, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x07, 0x81, 0x23, 0x91, 0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39,
    0x92, 0x01, 0x84, 0x0C, 0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62,
    0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0B, 0x42, 0xC4, 0x10, 0x32, 0x14,
    0x38, 0x08, 0x18, 0x4B, 0x0A, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20,
    0x43, 0x46, 0x88, 0xA5, 0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90,
    0x11, 0x23, 0xC4, 0x50, 0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A,
    0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x1B, 0x8C, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D,
    0x86, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x20, 0x01, 0xD5, 0x06, 0x62,
    0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00,
    0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xA4, 0x84,
    0x04, 0x13, 0x23, 0xE3, 0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8C, 0x8C,
    0x0B, 0x84, 0xC4, 0x4C, 0x10, 0x90, 0xC1, 0x08, 0x40, 0x09, 0x00, 0x0A,
    0xE6, 0x08, 0xC0, 0xA0, 0x0C, 0xC3, 0x30, 0x10, 0x71, 0xD3, 0x70, 0xF9,
    0x13, 0xF6, 0x10, 0x92, 0xDF, 0x21, 0x0C, 0xD1, 0x48, 0x88, 0xD3, 0x48,
    0x88, 0x18, 0x86, 0x61, 0x98, 0x23, 0x40, 0xE8, 0xB8, 0x67, 0xB8, 0xFC,
    0x09, 0x7B, 0x08, 0xC9, 0x0F, 0x81, 0x66, 0x58, 0x08, 0x14, 0x20, 0x85,
    0x30, 0x86, 0x64, 0x20, 0x65, 0x06, 0xE0, 0xA6, 0xE1, 0xF2, 0x27, 0xEC,
    0x21, 0x24, 0x7F, 0x25, 0xA4, 0x95, 0x98, 0xFC, 0xE2, 0xB6, 0x51, 0xC1,
    0x30, 0x0C, 0x33, 0x14, 0xA6, 0x19, 0x92, 0x84, 0x61, 0x18, 0x66, 0x18,
    0x06, 0x86, 0x9C, 0xB2, 0x00, 0x43, 0x32, 0x0C, 0x03, 0xC3, 0x30, 0xCC,
    0x41, 0xD0, 0x51, 0xC3, 0xE5, 0x4F, 0xD8, 0x43, 0x48, 0x3E, 0xB7, 0x51,
    0xC5, 0x4A, 0x4C, 0x3E, 0x72, 0xDB, 0x88, 0x18, 0x86, 0x61, 0x28, 0x84,
    0x34, 0x24, 0x03, 0x4D, 0x73, 0x04, 0x41, 0x31, 0x92, 0xE1, 0x18, 0x86,
    0x8A, 0xAC, 0x81, 0x80, 0x61, 0x04, 0x82, 0x99, 0xA9, 0x0D, 0xC6, 0x81,
    0x1D, 0xC2, 0x61, 0x1E, 0xE6, 0xC1, 0x0D, 0x68, 0xA1, 0x1C, 0xF0, 0x81,
    0x1E, 0xEA, 0x41, 0x1E, 0xCA, 0x41, 0x0E, 0x48, 0x81, 0x0F, 0xEC, 0xA1,
    0x1C, 0xC6, 0x81, 0x1E, 0xDE, 0x41, 0x1E, 0xF8, 0xC0, 0x1C, 0xD8, 0xE1,
    0x1D, 0xC2, 0x81, 0x1E, 0xD8, 0x00, 0x0C, 0xE8, 0xC0, 0x0F, 0xC0, 0xC0,
    0x0F, 0xF4, 0x40, 0x0F, 0xDA, 0x21, 0x1D, 0xE0, 0x61, 0x1E, 0x7E, 0x81,
    0x1E, 0xF2, 0x01, 0x1E, 0xCA, 0x01, 0x05, 0xC3, 0x4C, 0x62, 0x30, 0x0E,
    0xEC, 0x10, 0x0E, 0xF3, 0x30, 0x0F, 0x6E, 0x40, 0x0B, 0xE5, 0x80, 0x0F,
    0xF4, 0x50, 0x0F, 0xF2, 0x50, 0x0E, 0x72, 0x40, 0x0A, 0x7C, 0x60, 0x0F,
    0xE5, 0x30, 0x0E, 0xF4, 0xF0, 0x0E, 0xF2, 0xC0, 0x07, 0xE6, 0xC0, 0x0E,
    0xEF, 0x10, 0x0E, 0xF4, 0xC0, 0x06, 0x60, 0x40, 0x07, 0x7E, 0x00, 0x06,
    0x7E, 0x80, 0x84, 0x4C, 0xA3, 0x6D, 0x26, 0x32, 0x18, 0x07, 0x76, 0x08,
    0x87, 0x79, 0x98, 0x07, 0x37, 0x90, 0x85, 0x5B, 0xA0, 0x85, 0x72, 0xC0,
    0x07, 0x7A, 0xA8, 0x07, 0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3E, 0xB0,
    0x87, 0x72, 0x18, 0x07, 0x7A, 0x78, 0x07, 0x79, 0xE0, 0x03, 0x73, 0x60,
    0x87, 0x77, 0x08, 0x07, 0x7A, 0x60, 0x03, 0x30, 0xA0, 0x03, 0x3F, 0x00,
    0x03, 0x3F, 0x40, 0x41, 0x46, 0xDD, 0x4D, 0xD2, 0x14, 0x51, 0xC2, 0xE4,
    0xA7, 0x94, 0x74, 0x70, 0x4E, 0x23, 0x4D, 0x40, 0x33, 0xA1, 0x60, 0xB8,
    0x27, 0xF8, 0x1F, 0x4A, 0x3A, 0x7E, 0xC1, 0x69, 0xA4, 0x09, 0x68, 0x26,
    0x14, 0x7C, 0x04, 0xDE, 0x24, 0x4D, 0x11, 0x25, 0x4C, 0x3E, 0x0B, 0x30,
    0xCF, 0x42, 0x44, 0xEC, 0x04, 0x4C, 0x04, 0x0A, 0x06, 0x12, 0x01, 0x00,
    0x13, 0x14, 0x72, 0xC0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79,
    0x68, 0x03, 0x72, 0xC0, 0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E,
    0x7A, 0x50, 0x0E, 0x6D, 0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07,
    0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07,
    0x6D, 0x90, 0x0E, 0x78, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E,
    0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07,
    0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07,
    0x7A, 0x60, 0x07, 0x74, 0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07,
    0x73, 0x20, 0x07, 0x6D, 0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07,
    0x72, 0xD0, 0x06, 0xE6, 0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07,
    0x6D, 0xE0, 0x0E, 0x78, 0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07,
    0x72, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9E, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x14, 0x20,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x38,
    0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4,
    0x81, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
    0xC8, 0x33, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC0, 0x90, 0xC7, 0x02, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0x2C, 0x10, 0x0F, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14,
    0x19, 0x11, 0x4C, 0x90, 0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A,
    0x4A, 0x60, 0x04, 0xA0, 0x18, 0x8A, 0xA0, 0x24, 0x0A, 0xA1, 0x0C, 0xCA,
    0xA1, 0x14, 0x0A, 0xA2, 0x6C, 0xA8, 0x1A, 0x01, 0x20, 0x6E, 0x06, 0x80,
    0xBC, 0x19, 0x00, 0xFA, 0x66, 0x00, 0x08, 0x9C, 0x01, 0xA0, 0x70, 0x06,
    0x80, 0xC6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00,
    0x7A, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90, 0x46, 0x02, 0x13, 0xC4,
    0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24, 0xC6, 0x05, 0xC7, 0x45,
    0xA6, 0x06, 0x46, 0xC6, 0x05, 0x07, 0x04, 0x45, 0x8C, 0xE6, 0x26, 0x26,
    0x06, 0x67, 0x26, 0xA7, 0x2C, 0x65, 0x43, 0x10, 0x4C, 0x10, 0x86, 0x63,
    0x82, 0x30, 0x20, 0x1B, 0x84, 0x81, 0xD8, 0x20, 0x10, 0x04, 0x85, 0xB1,
    0xB9, 0x09, 0xC2, 0x90, 0x6C, 0x18, 0x0E, 0x84, 0x98, 0x20, 0x70, 0x13,
    0x1B, 0xBA, 0xAF, 0x39, 0xB9, 0xB1, 0x2F, 0xBA, 0x32, 0x3C, 0xBA, 0x3A,
    0xB9, 0xB2, 0x09, 0xC2, 0xA0, 0x4C, 0x10, 0x86, 0x65, 0x83, 0x40, 0x34,
    0x1B, 0x12, 0x42, 0x59, 0x08, 0x62, 0x60, 0x08, 0x67, 0x43, 0xF0, 0x4C,
    0x10, 0x3C, 0x8A, 0x4D, 0xDD, 0x17, 0xD9, 0x1C, 0xDD, 0x17, 0x5D, 0x19,
    0x1E, 0x5D, 0x9D, 0x5C, 0xD9, 0x04, 0xA1, 0x92, 0x36, 0x2C, 0x44, 0x24,
    0x0D, 0xC4, 0xC0, 0x4C, 0xD3, 0xE4, 0x6C, 0x08, 0xA8, 0x09, 0x42, 0x18,
    0x5C, 0x7C, 0xC4, 0xBE, 0xE0, 0xEA, 0xE6, 0xD0, 0xBE, 0xC6, 0xDE, 0xDC,
    0xE6, 0xE8, 0xC2, 0xDC, 0xE8, 0x26, 0x08, 0x03, 0xB3, 0x01, 0x21, 0xAC,
    0x8B, 0x20, 0x06, 0x0C, 0xD8, 0x10, 0x64, 0x13, 0x84, 0x31, 0xC0, 0x98,
    0xCC, 0x7D, 0xCD, 0x85, 0xB5, 0xC1, 0xB1, 0x95, 0xC9, 0x6D, 0x40, 0x88,
    0x8D, 0x63, 0x88, 0x81, 0x00, 0x36, 0x04, 0xDD, 0x06, 0x02, 0xAA, 0x34,
    0x6F, 0x82, 0xF0, 0x55, 0x4C, 0xDA, 0xD2, 0xE0, 0xBE, 0xD8, 0xCA, 0xEC,
    0xCA, 0xD8, 0x26, 0x08, 0x43, 0x33, 0x41, 0x18, 0x9C, 0x09, 0xC2, 0xF0,
    0x6C, 0x30, 0x90, 0x30, 0x10, 0x03, 0x62, 0x0C, 0xC8, 0x60, 0x83, 0x80,
    0x95, 0xC1, 0x04, 0x01, 0x0C, 0xAC, 0x0D, 0x04, 0x72, 0x89, 0x01, 0xB1,
    0x41, 0xC0, 0xD0, 0x60, 0x43, 0x41, 0x80, 0x81, 0x19, 0x9C, 0x41, 0x1A,
    0x4C, 0x10, 0x04, 0x60, 0x03, 0xB0, 0x61, 0x20, 0xD8, 0x80, 0x0D, 0x36,
    0x04, 0x6D, 0xB0, 0x61, 0x18, 0xD6, 0xC0, 0x0D, 0x68, 0xB4, 0xA5, 0xC1,
    0xB5, 0x85, 0xC1, 0x4D, 0x10, 0x06, 0x68, 0xC3, 0x10, 0x07, 0x71, 0x30,
    0x6C, 0x10, 0x30, 0x39, 0xD8, 0x50, 0xAC, 0x01, 0x1C, 0x00, 0xDF, 0x1C,
    0xD0, 0x30, 0x63, 0x7B, 0x0B, 0xA3, 0x9B, 0x63, 0x91, 0xE6, 0x36, 0x47,
    0x37, 0x37, 0x41, 0x18, 0x22, 0x22, 0x74, 0x65, 0x78, 0x5F, 0x6E, 0x6F,
    0x72, 0x6D, 0x4C, 0xE8, 0xCA, 0xF0, 0xBE, 0xE6, 0xE8, 0xDE, 0xE4, 0xCA,
    0x36, 0x20, 0x75, 0xD0, 0xD8, 0xC1, 0x1D, 0xE0, 0xC1, 0x90, 0x07, 0x43,
    0x15, 0x36, 0x36, 0xBB, 0x36, 0x97, 0x34, 0xB2, 0x32, 0x37, 0xBA, 0x29,
    0x41, 0x50, 0x85, 0x0C, 0xCF, 0xC5, 0xAE, 0x4C, 0x6E, 0x2E, 0xED, 0xCD,
    0x6D, 0x4A, 0x40, 0x34, 0x21, 0xC3, 0x73, 0xB1, 0x0B, 0x63, 0xB3, 0x2B,
    0x93, 0x9B, 0x12, 0x14, 0x75, 0xC8, 0xF0, 0x5C, 0xE6, 0xD0, 0xC2, 0xC8,
    0xCA, 0xE4, 0x9A, 0xDE, 0xC8, 0xCA, 0xD8, 0xA6, 0x04, 0x48, 0x19, 0x32,
    0x3C, 0x17, 0xB9, 0xB2, 0xB9, 0xB7, 0x3A, 0xB9, 0xB1, 0xB2, 0xB9, 0x29,
    0x81, 0x57, 0x89, 0x0C, 0xCF, 0x85, 0x2E, 0x0F, 0xAE, 0x2C, 0xC8, 0xCD,
    0xED, 0x8D, 0x2E, 0x8C, 0x2E, 0xED, 0xCD, 0x6D, 0x6E, 0x8A, 0x90, 0x06,
    0x6E, 0x50, 0x87, 0x0C, 0xCF, 0xA5, 0xCC, 0x8D, 0x4E, 0x2E, 0x0F, 0xEA,
    0x2D, 0xCD, 0x8D, 0x6E, 0x6E, 0x4A, 0x30, 0x07, 0x5D, 0xC8, 0xF0, 0x5C,
    0xC6, 0xDE, 0xEA, 0xDC, 0xE8, 0xCA, 0xE4, 0xE6, 0xA6, 0x04, 0x79, 0x00,
    0x79, 0x18, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1C,
    0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88, 0x43, 0x38, 0x84, 0xC3,
    0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0C, 0xE6,
    0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E, 0x33, 0x0C, 0x42, 0x1E,
    0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30, 0x05, 0x3D, 0x88, 0x43,
    0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8, 0x43, 0x3D, 0x8C, 0x03,
    0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B, 0x08, 0x07, 0x79, 0x48,
    0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
    0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E, 0xE1, 0x30, 0x0F, 0x6E,
    0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E, 0x33, 0x10, 0xC4, 0x1D,
    0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61, 0x1E, 0x66, 0x30, 0x89,
    0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4, 0x03, 0x3C, 0xBC, 0x83,
    0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76, 0x60, 0x07, 0x7B, 0x68,
    0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
    0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xF8, 0x05, 0x76, 0x78,
    0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
    0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E, 0xEE, 0xE0, 0x0E, 0xF5,
    0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C,
    0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61, 0x1C, 0xCA, 0x21, 0x1C,
    0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90, 0x43, 0x39, 0xC8, 0x43,
    0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8, 0xC3, 0x38, 0x94, 0x43,
    0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC, 0x83, 0x3C, 0xFC, 0x82,
    0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4, 0x21, 0x07, 0x7C, 0x70,
    0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xD1, 0x43, 0x0E, 0xF8,
    0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06, 0xF6, 0x10, 0x0E, 0xF2,
    0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F, 0xF4, 0x00, 0x00, 0x00,
    0x71, 0x20, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x56, 0xB0, 0x0D, 0x97,
    0xEF, 0x3C, 0xBE, 0x10, 0x50, 0x45, 0x41, 0x44, 0xA5, 0x03, 0x0C, 0x25,
    0x61, 0x00, 0x02, 0xE6, 0x23, 0xB7, 0x6D, 0x06, 0xD2, 0x70, 0xF9, 0xCE,
    0xE3, 0x0B, 0x11, 0x01, 0x4C, 0x44, 0x08, 0x34, 0xC3, 0x42, 0x98, 0xC0,
    0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0x06, 0x31, 0x75, 0x08, 0x43, 0x34, 0x12,
    0xE2, 0x34, 0x92, 0x0D, 0x54, 0xC3, 0xE5, 0x3B, 0x8F, 0x2F, 0x01, 0xCC,
    0xB3, 0x10, 0x25, 0x51, 0x11, 0x8B, 0x5F, 0xDC, 0xB6, 0x11, 0x58, 0xC3,
    0xE5, 0x3B, 0x8F, 0x3F, 0x11, 0xD7, 0x44, 0x45, 0x04, 0x3B, 0x39, 0x11,
    0xE1, 0x17, 0xB7, 0x6D, 0x01, 0xD2, 0x70, 0xF9, 0xCE, 0xE3, 0x4F, 0x47,
    0x44, 0x00, 0x83, 0x38, 0xF8, 0xC8, 0x6D, 0x1B, 0x80, 0xC1, 0x20, 0x0F,
    0x03, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48,
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0xEC, 0x78, 0x3B,
    0x81, 0x8E, 0x2A, 0x47, 0x22, 0x9C, 0xBB, 0x05, 0x75, 0xAD, 0xC6, 0x7C,
    0x44, 0x58, 0x49, 0x4C, 0x38, 0x07, 0x00, 0x00, 0x60, 0x00, 0x05, 0x00,
    0xCE, 0x01, 0x00, 0x00, 0x44, 0x58, 0x49, 0x4C, 0x00, 0x01, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00, 0x42, 0x43, 0xC0, 0xDE,
    0x21, 0x0C, 0x00, 0x00, 0xC5, 0x01, 0x00, 0x00, 0x0B, 0x82, 0x20, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
    0x41, 0xC8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0C,
    0x25, 0x05, 0x08, 0x19, 0x1E, 0x04, 0x8B, 0x62, 0x80, 0x18, 0x45, 0x02,
    0x42, 0x92, 0x0B, 0x42, 0xC4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4B,
    0x0A, 0x32, 0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xA5,
    0x00, 0x19, 0x32, 0x42, 0xE4, 0x48, 0x0E, 0x90, 0x11, 0x23, 0xC4, 0x50,
    0x41, 0x51, 0x81, 0x8C, 0xE1, 0x83, 0xE5, 0x8A, 0x04, 0x31, 0x46, 0x06,
    0x51, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x8C, 0xE0, 0xFF,
    0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x02, 0xA8, 0x0D, 0x86, 0xF0, 0xFF, 0xFF,
    0xFF, 0xFF, 0x03, 0x20, 0x01, 0xD5, 0x06, 0x62, 0xF8, 0xFF, 0xFF, 0xFF,
    0xFF, 0x01, 0x90, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x13, 0x82, 0x60, 0x42, 0x20, 0x4C, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x89, 0x20, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09,
    0x20, 0x64, 0x85, 0x04, 0x13, 0x23, 0xA4, 0x84, 0x04, 0x13, 0x23, 0xE3,
    0x84, 0xA1, 0x90, 0x14, 0x12, 0x4C, 0x8C, 0x8C, 0x0B, 0x84, 0xC4, 0x4C,
    0x10, 0x90, 0xC1, 0x08, 0x40, 0x09, 0x00, 0x0A, 0xE6, 0x08, 0xC0, 0xA0,
    0x0C, 0xC3, 0x30, 0x10, 0x71, 0xD3, 0x70, 0xF9, 0x13, 0xF6, 0x10, 0x92,
    0xDF, 0x21, 0x0C, 0xD1, 0x48, 0x88, 0xD3, 0x48, 0x88, 0x18, 0x86, 0x61,
    0x98, 0x23, 0x40, 0xE8, 0xB8, 0x67, 0xB8, 0xFC, 0x09, 0x7B, 0x08, 0xC9,
    0x0F, 0x81, 0x66, 0x58, 0x08, 0x14, 0x20, 0x85, 0x30, 0x86, 0x64, 0x20,
    0x65, 0x06, 0xE0, 0xA6, 0xE1, 0xF2, 0x27, 0xEC, 0x21, 0x24, 0x7F, 0x25,
    0xA4, 0x95, 0x98, 0xFC, 0xE2, 0xB6, 0x51, 0xC1, 0x30, 0x0C, 0x33, 0x14,
    0xA6, 0x19, 0x92, 0x84, 0x61, 0x18, 0x66, 0x18, 0x06, 0x86, 0x9C, 0xB2,
    0x00, 0x43, 0x32, 0x0C, 0x03, 0xC3, 0x30, 0xCC, 0x41, 0xD0, 0x51, 0xC3,
    0xE5, 0x4F, 0xD8, 0x43, 0x48, 0x3E, 0xB7, 0x51, 0xC5, 0x4A, 0x4C, 0x3E,
    0x72, 0xDB, 0x88, 0x18, 0x86, 0x61, 0x28, 0x84, 0x34, 0x24, 0x03, 0x4D,
    0x73, 0x04, 0x41, 0x31, 0x92, 0xE1, 0x18, 0x86, 0x8A, 0xAC, 0x81, 0x80,
    0x61, 0x04, 0x82, 0x99, 0xA9, 0x0D, 0xC6, 0x81, 0x1D, 0xC2, 0x61, 0x1E,
    0xE6, 0xC1, 0x0D, 0x68, 0xA1, 0x1C, 0xF0, 0x81, 0x1E, 0xEA, 0x41, 0x1E,
    0xCA, 0x41, 0x0E, 0x48, 0x81, 0x0F, 0xEC, 0xA1, 0x1C, 0xC6, 0x81, 0x1E,
    0xDE, 0x41, 0x1E, 0xF8, 0xC0, 0x1C, 0xD8, 0xE1, 0x1D, 0xC2, 0x81, 0x1E,
    0xD8, 0x00, 0x0C, 0xE8, 0xC0, 0x0F, 0xC0, 0xC0, 0x0F, 0xF4, 0x40, 0x0F,
    0xDA, 0x21, 0x1D, 0xE0, 0x61, 0x1E, 0x7E, 0x81, 0x1E, 0xF2, 0x01, 0x1E,
    0xCA, 0x01, 0x05, 0xC3, 0x4C, 0x62, 0x30, 0x0E, 0xEC, 0x10, 0x0E, 0xF3,
    0x30, 0x0F, 0x6E, 0x40, 0x0B, 0xE5, 0x80, 0x0F, 0xF4, 0x50, 0x0F, 0xF2,
    0x50, 0x0E, 0x72, 0x40, 0x0A, 0x7C, 0x60, 0x0F, 0xE5, 0x30, 0x0E, 0xF4,
    0xF0, 0x0E, 0xF2, 0xC0, 0x07, 0xE6, 0xC0, 0x0E, 0xEF, 0x10, 0x0E, 0xF4,
    0xC0, 0x06, 0x60, 0x40, 0x07, 0x7E, 0x00, 0x06, 0x7E, 0x80, 0x84, 0x4C,
    0xA3, 0x6D, 0x26, 0x32, 0x18, 0x07, 0x76, 0x08, 0x87, 0x79, 0x98, 0x07,
    0x37, 0x90, 0x85, 0x5B, 0xA0, 0x85, 0x72, 0xC0, 0x07, 0x7A, 0xA8, 0x07,
    0x79, 0x28, 0x07, 0x39, 0x20, 0x05, 0x3E, 0xB0, 0x87, 0x72, 0x18, 0x07,
    0x7A, 0x78, 0x07, 0x79, 0xE0, 0x03, 0x73, 0x60, 0x87, 0x77, 0x08, 0x07,
    0x7A, 0x60, 0x03, 0x30, 0xA0, 0x03, 0x3F, 0x00, 0x03, 0x3F, 0x40, 0x41,
    0x46, 0xDD, 0x4D, 0xD2, 0x14, 0x51, 0xC2, 0xE4, 0xA7, 0x94, 0x74, 0x70,
    0x4E, 0x23, 0x4D, 0x40, 0x33, 0xA1, 0x60, 0xB8, 0x27, 0xF8, 0x1F, 0x4A,
    0x3A, 0x7E, 0xC1, 0x69, 0xA4, 0x09, 0x68, 0x26, 0x14, 0x7C, 0x04, 0xDE,
    0x24, 0x4D, 0x11, 0x25, 0x4C, 0x3E, 0x0B, 0x30, 0xCF, 0x42, 0x44, 0xEC,
    0x04, 0x4C, 0x04, 0x0A, 0x06, 0x12, 0x01, 0x00, 0x13, 0x14, 0x72, 0xC0,
    0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xC0,
    0x87, 0x0D, 0xAF, 0x50, 0x0E, 0x6D, 0xD0, 0x0E, 0x7A, 0x50, 0x0E, 0x6D,
    0x00, 0x0F, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D,
    0x90, 0x0E, 0x71, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x78,
    0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D, 0x90, 0x0E, 0x71, 0x60, 0x07, 0x7A,
    0x30, 0x07, 0x72, 0xD0, 0x06, 0xE9, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x73,
    0x20, 0x07, 0x6D, 0x90, 0x0E, 0x76, 0x40, 0x07, 0x7A, 0x60, 0x07, 0x74,
    0xD0, 0x06, 0xE6, 0x10, 0x07, 0x76, 0xA0, 0x07, 0x73, 0x20, 0x07, 0x6D,
    0x60, 0x0E, 0x73, 0x20, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xD0, 0x06, 0xE6,
    0x60, 0x07, 0x74, 0xA0, 0x07, 0x76, 0x40, 0x07, 0x6D, 0xE0, 0x0E, 0x78,
    0xA0, 0x07, 0x71, 0x60, 0x07, 0x7A, 0x30, 0x07, 0x72, 0xA0, 0x07, 0x76,
    0x40, 0x07, 0x43, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x86, 0x3C, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0C, 0x79, 0x14, 0x20, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xF2, 0x38, 0x40, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xE4, 0x81, 0x80, 0x00, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC8, 0x33, 0x01, 0x01,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x90, 0xC7, 0x02,
    0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2C, 0x10,
    0x0B, 0x00, 0x00, 0x00, 0x32, 0x1E, 0x98, 0x14, 0x19, 0x11, 0x4C, 0x90,
    0x8C, 0x09, 0x26, 0x47, 0xC6, 0x04, 0x43, 0x1A, 0x4A, 0x60, 0x04, 0xA0,
    0x20, 0x8A, 0xA1, 0x08, 0x4A, 0xA2, 0x10, 0xA8, 0x1A, 0x01, 0x20, 0x6E,
    0x06, 0x80, 0xBC, 0x19, 0x00, 0x0A, 0x67, 0x00, 0x68, 0x9C, 0x01, 0x00,
    0x79, 0x18, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x1A, 0x03, 0x4C, 0x90,
    0x46, 0x02, 0x13, 0xC4, 0x8E, 0x0C, 0x6F, 0xEC, 0xED, 0x4D, 0x0C, 0x24,
    0xC6, 0x05, 0xC7, 0x45, 0xA6, 0x06, 0x46, 0xC6, 0x05, 0x07, 0x04, 0x45,
    0x8C, 0xE6, 0x26, 0x26, 0x06, 0x67, 0x26, 0xA7, 0x2C, 0x65, 0x43, 0x10,
    0x4C, 0x10, 0x86, 0x63, 0x82, 0x30, 0x20, 0x1B, 0x84, 0x81, 0x98, 0x20,
    0x0C, 0xC9, 0x06, 0x61, 0x30, 0x28, 0x8C, 0xCD, 0x4D, 0x10, 0x06, 0x65,
    0xC3, 0x80, 0x24, 0xC4, 0x04, 0x81, 0x7B, 0x08, 0x4C, 0x10, 0x86, 0x65,
    0x82, 0x30, 0x30, 0x1B, 0x04, 0xC2, 0xD9, 0x90, 0x10, 0x0B, 0x43, 0x10,
    0x43, 0x43, 0x3C, 0x1B, 0x02, 0x68, 0x82, 0xE0, 0x41, 0x13, 0x84, 0xCA,
    0xD9, 0xB0, 0x10, 0x12, 0x33, 0x10, 0x43, 0x33, 0x4D, 0xD3, 0xB3, 0x21,
    0xA0, 0x26, 0x08, 0x61, 0x10, 0x4D, 0x10, 0x86, 0x66, 0x03, 0x42, 0x58,
    0x0C, 0x41, 0x0C, 0x17, 0xB0, 0x21, 0xC0, 0x26, 0x08, 0x63, 0x20, 0x6D,
    0x40, 0x08, 0x8D, 0x69, 0x88, 0x81, 0x00, 0x36, 0x04, 0xDB, 0x06, 0x22,
    0xAA, 0x32, 0x6E, 0x82, 0x20, 0x00, 0x34, 0xDA, 0xD2, 0xE0, 0xDA, 0xC2,
    0xE0, 0x36, 0x0C, 0x86, 0x31, 0x6C, 0x10, 0x2E, 0x30, 0xD8, 0x50, 0x78,
    0x1F, 0xD0, 0x85, 0x41, 0x15, 0x36, 0x36, 0xBB, 0x36, 0x97, 0x34, 0xB2,
    0x32, 0x37, 0xBA, 0x29, 0x41, 0x50, 0x85, 0x0C, 0xCF, 0xC5, 0xAE, 0x4C,
    0x6E, 0x2E, 0xED, 0xCD, 0x6D, 0x4A, 0x40, 0x34, 0x21, 0xC3, 0x73, 0xB1,
    0x0B, 0x63, 0xB3, 0x2B, 0x93, 0x9B, 0x12, 0x18, 0x75, 0xC8, 0xF0, 0x5C,
    0xE6, 0xD0, 0xC2, 0xC8, 0xCA, 0xE4, 0x9A, 0xDE, 0xC8, 0xCA, 0xD8, 0xA6,
    0x04, 0x49, 0x19, 0x32, 0x3C, 0x17, 0xB9, 0xB2, 0xB9, 0xB7, 0x3A, 0xB9,
    0xB1, 0xB2, 0xB9, 0x29, 0x01, 0x57, 0x87, 0x0C, 0xCF, 0xA5, 0xCC, 0x8D,
    0x4E, 0x2E, 0x0F, 0xEA, 0x2D, 0xCD, 0x8D, 0x6E, 0x6E, 0x4A, 0x10, 0x06,
    0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00,
    0x33, 0x08, 0x80, 0x1C, 0xC4, 0xE1, 0x1C, 0x66, 0x14, 0x01, 0x3D, 0x88,
    0x43, 0x38, 0x84, 0xC3, 0x8C, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
    0x98, 0x71, 0x0C, 0xE6, 0x00, 0x0F, 0xED, 0x10, 0x0E, 0xF4, 0x80, 0x0E,
    0x33, 0x0C, 0x42, 0x1E, 0xC2, 0xC1, 0x1D, 0xCE, 0xA1, 0x1C, 0x66, 0x30,
    0x05, 0x3D, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1B, 0xCC, 0x03, 0x3D, 0xC8,
    0x43, 0x3D, 0x8C, 0x03, 0x3D, 0xCC, 0x78, 0x8C, 0x74, 0x70, 0x07, 0x7B,
    0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7A, 0x70, 0x03, 0x76,
    0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xCC, 0x11, 0x0E, 0xEC, 0x90, 0x0E,
    0xE1, 0x30, 0x0F, 0x6E, 0x30, 0x0F, 0xE3, 0xF0, 0x0E, 0xF0, 0x50, 0x0E,
    0x33, 0x10, 0xC4, 0x1D, 0xDE, 0x21, 0x1C, 0xD8, 0x21, 0x1D, 0xC2, 0x61,
    0x1E, 0x66, 0x30, 0x89, 0x3B, 0xBC, 0x83, 0x3B, 0xD0, 0x43, 0x39, 0xB4,
    0x03, 0x3C, 0xBC, 0x83, 0x3C, 0x84, 0x03, 0x3B, 0xCC, 0xF0, 0x14, 0x76,
    0x60, 0x07, 0x7B, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
    0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
    0xF8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5F, 0x08, 0x87, 0x71,
    0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2C, 0xEE, 0xF0, 0x0E,
    0xEE, 0xE0, 0x0E, 0xF5, 0xC0, 0x0E, 0xEC, 0x30, 0x03, 0x62, 0xC8, 0xA1,
    0x1C, 0xE4, 0xA1, 0x1C, 0xCC, 0xA1, 0x1C, 0xE4, 0xA1, 0x1C, 0xDC, 0x61,
    0x1C, 0xCA, 0x21, 0x1C, 0xC4, 0x81, 0x1D, 0xCA, 0x61, 0x06, 0xD6, 0x90,
    0x43, 0x39, 0xC8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xC8, 0x43, 0x39, 0xB8,
    0xC3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3B, 0x94, 0xC3, 0x2F, 0xBC,
    0x83, 0x3C, 0xFC, 0x82, 0x3B, 0xD4, 0x03, 0x3B, 0xB0, 0xC3, 0x0C, 0xC4,
    0x21, 0x07, 0x7C, 0x70, 0x03, 0x7A, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
    0xD1, 0x43, 0x0E, 0xF8, 0xE0, 0x06, 0xE4, 0x20, 0x0E, 0xE7, 0xE0, 0x06,
    0xF6, 0x10, 0x0E, 0xF2, 0xC0, 0x0E, 0xE1, 0x90, 0x0F, 0xEF, 0x50, 0x0F,
    0xF4, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,
    0x56, 0xB0, 0x0D, 0x97, 0xEF, 0x3C, 0xBE, 0x10, 0x50, 0x45, 0x41, 0x44,
    0xA5, 0x03, 0x0C, 0x25, 0x61, 0x00, 0x02, 0xE6, 0x23, 0xB7, 0x6D, 0x06,
    0xD2, 0x70, 0xF9, 0xCE, 0xE3, 0x0B, 0x11, 0x01, 0x4C, 0x44, 0x08, 0x34,
    0xC3, 0x42, 0x98, 0xC0, 0x34, 0x5C, 0xBE, 0xF3, 0xF8, 0x06, 0x31, 0x75,
    0x08, 0x43, 0x34, 0x12, 0xE2, 0x34, 0x92, 0x0D, 0x54, 0xC3, 0xE5, 0x3B,
    0x8F, 0x2F, 0x01, 0xCC, 0xB3, 0x10, 0x25, 0x51, 0x11, 0x8B, 0x5F, 0xDC,
    0xB6, 0x11, 0x58, 0xC3, 0xE5, 0x3B, 0x8F, 0x3F, 0x11, 0xD7, 0x44, 0x45,
    0x04, 0x3B, 0x39, 0x11, 0xE1, 0x17, 0xB7, 0x6D, 0x01, 0xD2, 0x70, 0xF9,
    0xCE, 0xE3, 0x4F, 0x47, 0x44, 0x00, 0x83, 0x38, 0xF8, 0xC8, 0x6D, 0x1B,
    0x80, 0xC1, 0x20, 0x0F, 0x03, 0x3C, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2C, 0x10, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x34, 0x94, 0x5C, 0xE9, 0x06, 0xCC, 0x00, 0x14,
    0x64, 0x40, 0xD9, 0x15, 0x5F, 0x19, 0x06, 0xD0, 0x51, 0x02, 0x23, 0x00,
    0x65, 0x50, 0x04, 0xE5, 0x41, 0xCC, 0x18, 0x01, 0x08, 0x82, 0x20, 0xFC,
    0xCD, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x6D,
    0xCE, 0x91, 0x65, 0xD3, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x58, 0xDC,
    0x73, 0x68, 0x1A, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x56, 0x07,
    0x1D, 0xDB, 0x56, 0x8D, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xE5, 0x45,
    0x07, 0xC7, 0x59, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x40, 0x90, 0x41,
    0xD4, 0x8D, 0x18, 0x18, 0x00, 0x08, 0x82, 0x01, 0x51, 0x06, 0xD2, 0x37,
    0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x4A, 0x19, 0x44, 0xC6, 0x37, 0x9A,
    0x10, 0x00, 0xA3, 0x09, 0x42, 0x70, 0x05, 0x53, 0x57, 0x30, 0x65, 0x42,
    0x03, 0x1F, 0x13, 0x1C, 0xF8, 0x9C, 0xC1, 0xD4, 0x19, 0x4C, 0x19, 0x21,
    0xD0, 0xC7, 0x08, 0x81, 0x3E, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30,
    0xB5, 0xC1, 0xE6, 0xA8, 0xC1, 0x68, 0x42, 0x00, 0x5C, 0xC0, 0xD4, 0x88,
    0xC1, 0x03, 0x80, 0x20, 0x18, 0x38, 0x72, 0xD0, 0x4D, 0x52, 0x41, 0x54,
    0x55, 0x1B, 0xB4, 0x01, 0x18, 0x04, 0xA3, 0x09, 0x01, 0x30, 0x9A, 0x20,
    0x04, 0xA3, 0x09, 0x83, 0x30, 0x9A, 0x40, 0x0C, 0x23, 0x06, 0x0E, 0x00,
    0x82, 0x60, 0x00, 0xD9, 0x41, 0x18, 0x64, 0x15, 0x55, 0x06, 0xC4, 0x20,
    0x04, 0x1C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
};

static constexpr D3D12_COMMAND_LIST_TYPE Command_List_Map[GPU_Queue_Type_Count] =
{
    D3D12_COMMAND_LIST_TYPE_DIRECT,
    D3D12_COMMAND_LIST_TYPE_COMPUTE,
    D3D12_COMMAND_LIST_TYPE_COPY
};


DX12CommandBuffer::DX12CommandBuffer(GPUCommandPool const* pool, GPUCommandBufferCreateInfo const& info) : m_command_list(nullptr), m_bound_descriptor_heaps{}, m_bound_heap_index(0), m_bound_root_signature(nullptr)
{
    DX12CommandPool const* dx12_command_pool = static_cast<DX12CommandPool const*>(pool);
    DX12Queue const* dx12_queue = static_cast<DX12Queue const*>(dx12_command_pool->m_ref_queue);
    DX12Device const* dx12_device = static_cast<DX12Device const*>(dx12_queue->m_ref_device);

    m_bound_heap_index = GPU_Node_Index;

    ID3D12GraphicsCommandList* command = nullptr;
    DX_CHECK_RESULT(dx12_device->m_device->CreateCommandList(m_bound_heap_index,
        Command_List_Map[to_underlying(dx12_queue->m_type)], dx12_command_pool->m_command_allocator,
        nullptr, IID_PPV_ARGS(&command)));
    DX_CHECK_RESULT(command->Close());

    if (FAILED(command->QueryInterface(IID_PPV_ARGS(&m_command_list))))
        RENDERING_LOG_ERROR("can't support ID3D12GraphicsCommandList4!");

    DX_FREE(command);

    m_bound_descriptor_heaps[0] = dx12_device->m_descriptor_heap->m_gpu_cbv_srv_uav_heaps[m_bound_heap_index];
    m_bound_descriptor_heaps[1] = dx12_device->m_descriptor_heap->m_gpu_sampler_heaps[m_bound_heap_index];
    m_ref_pool = dx12_command_pool;
}

DX12CommandBuffer::~DX12CommandBuffer()
{
    DX_FREE(m_command_list);
}

void DX12CommandBuffer::begin_command()
{
    DX12CommandPool const* dx12_command_pool = static_cast<DX12CommandPool const*>(m_ref_pool);
    DX12Queue const* dx12_queue = static_cast<DX12Queue const*>(dx12_command_pool->m_ref_queue);

    DX_CHECK_RESULT(m_command_list->Reset(dx12_command_pool->m_command_allocator, nullptr));

    if (dx12_queue->m_type != GPUQueueType::e_transfer)
    {
        ID3D12DescriptorHeap* heaps[] = {
            m_bound_descriptor_heaps[0]->descriptor_heap,
            m_bound_descriptor_heaps[1]->descriptor_heap
        };
        m_command_list->SetDescriptorHeaps(2, heaps);
    }

    m_bound_root_signature = nullptr;
}

void DX12CommandBuffer::end_command()
{
    DX_CHECK_RESULT(m_command_list->Close());
}

void DX12CommandBuffer::begin_query(GPUQueryPool const* pool, GPUQueryInfo const& info)
{
    DX12QueryPool const* dx12_query_pool = static_cast<DX12QueryPool const*>(pool);

    switch (dx12_query_pool->m_query_type)
    {
    case GPUQueryType::e_timestamp:
        break;
    default:
        m_command_list->BeginQuery(dx12_query_pool->m_query_heap, Query_Type_Map[to_underlying(dx12_query_pool->m_query_type)], info.index);
        break;
    }
}

void DX12CommandBuffer::end_query(GPUQueryPool const* pool, GPUQueryInfo const& info)
{
    DX12QueryPool const* dx12_query_pool = static_cast<DX12QueryPool const*>(pool);

    m_command_list->EndQuery(dx12_query_pool->m_query_heap, Query_Type_Map[to_underlying(dx12_query_pool->m_query_type)], info.index);
}

GPUGraphicsPassEncoder* DX12CommandBuffer::begin_graphics_pass(GPUGraphicsPassCreateInfo const& info)
{
    D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS sub_resolve_subresource[GPU_Max_Render_Target]{};
    D3D12_RENDER_PASS_RENDER_TARGET_DESC render_target_desc[GPU_Max_Render_Target]{};
    for (size_t i = 0; i < info.color_attachment_count; i++)
    {
        GPUColorAttachment const& color_attachment = info.color_attachments[i];
        DX12TextureView const* texture_view = static_cast<DX12TextureView const*>(color_attachment.texture_view);

        D3D12_CLEAR_VALUE color_clear_value{
            .Format = transfer_format(texture_view->m_format),
            .Color{color_attachment.clear_color.color.r, color_attachment.clear_color.color.g,
            color_attachment.clear_color.color.b, color_attachment.clear_color.color.a}
        };

        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE render_pass_begin_access_type = Render_Pass_Begin_Map[to_underlying(color_attachment.load)];
        if (info.sample_count > GPUSampleCount::e_1 && color_attachment.resolve_view)
        {
            DX12TextureView const* resolve_view = static_cast<DX12TextureView const*>(color_attachment.resolve_view);
            DX12Texture const* texture = static_cast<DX12Texture const*>(texture_view->m_ref_texture);
            DX12Texture const* resolve = static_cast<DX12Texture const*>(resolve_view->m_ref_texture);

            sub_resolve_subresource[i].SrcRect = { 0, 0, static_cast<int>(texture->m_info->width), static_cast<int>(texture->m_info->height) };

            D3D12_RENDER_PASS_ENDING_ACCESS_TYPE render_pass_end_access_type = D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE;
            D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS resolve_parameters{
                .pSrcResource = texture->m_resource,
                .pDstResource = resolve->m_resource,
                .SubresourceCount = 1,
                .pSubresourceParameters = &sub_resolve_subresource[i],
                .Format = color_clear_value.Format,
                .ResolveMode = D3D12_RESOLVE_MODE_AVERAGE,
                .PreserveResolveSource = false,
            };

            render_target_desc[i].EndingAccess = { render_pass_end_access_type, {resolve_parameters} };
        }
        else
        {
            D3D12_RENDER_PASS_ENDING_ACCESS_TYPE render_pass_end_access_type = Render_Pass_End_Map[to_underlying(color_attachment.store)];
            render_target_desc[i].EndingAccess = { render_pass_end_access_type, {} };
        }
        render_target_desc[i].cpuDescriptor = texture_view->m_rtv_dsv_handle;
        render_target_desc[i].BeginningAccess = { render_pass_begin_access_type, {color_clear_value} };
    }

    // depth stencil
    D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* depth_stencil_desc = nullptr;
    D3D12_RENDER_PASS_DEPTH_STENCIL_DESC depth_stencil{};
    if (info.depth_stencil_attachment && info.depth_stencil_attachment->texture_view)
    {
        DX12TextureView const* texture_view = static_cast<DX12TextureView const*>(info.depth_stencil_attachment->texture_view);
        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE depth_begin_access = Render_Pass_Begin_Map[to_underlying(info.depth_stencil_attachment->depth_load)];
        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE stencil_begin_access = Render_Pass_Begin_Map[to_underlying(info.depth_stencil_attachment->stencil_load)];
        D3D12_RENDER_PASS_ENDING_ACCESS_TYPE depth_end_access = Render_Pass_End_Map[to_underlying(info.depth_stencil_attachment->depth_store)];
        D3D12_RENDER_PASS_ENDING_ACCESS_TYPE stencil_end_access = Render_Pass_End_Map[to_underlying(info.depth_stencil_attachment->stencil_store)];

        D3D12_CLEAR_VALUE depth_clear_value{
            .Format = transfer_format(texture_view->m_format),
            .DepthStencil{
                .Depth = info.depth_stencil_attachment->clear_color.depth_stencil.depth,
            },
        };
        D3D12_CLEAR_VALUE stencil_clear_value{
            .Format = transfer_format(texture_view->m_format),
            .DepthStencil{
                .Stencil = static_cast<uint8_t>(info.depth_stencil_attachment->clear_color.depth_stencil.stencil),
            },
        };

        depth_stencil.cpuDescriptor = texture_view->m_rtv_dsv_handle;
        depth_stencil.DepthBeginningAccess = { depth_begin_access, {depth_clear_value} };
        depth_stencil.DepthEndingAccess = { depth_end_access, {} };
        depth_stencil.StencilBeginningAccess = { stencil_begin_access, {stencil_clear_value} };
        depth_stencil.StencilEndingAccess = { stencil_end_access, {} };
        depth_stencil_desc = &depth_stencil;
    }

    m_command_list->BeginRenderPass(info.color_attachment_count, render_target_desc, depth_stencil_desc, D3D12_RENDER_PASS_FLAG_NONE);

    DX12GraphicsPassEncoder* encoder = PLACEMENT_NEW(DX12GraphicsPassEncoder, sizeof(DX12GraphicsPassEncoder));
    encoder->m_command_buffer = this;
    return encoder;
}

void DX12CommandBuffer::end_graphics_pass(GPUGraphicsPassEncoder* encoder)
{
    PLACEMENT_DELETE(DX12GraphicsPassEncoder, static_cast<DX12GraphicsPassEncoder*>(encoder));
    m_command_list->EndRenderPass();
}

GPUComputePassEncoder* DX12CommandBuffer::begin_compute_pass(GPUComputePassCreateInfo const& info)
{
    DX12ComputePassEncoder* encoder = PLACEMENT_NEW(DX12ComputePassEncoder, sizeof(DX12ComputePassEncoder));
    encoder->m_command_buffer = this;
    return encoder;
}

void DX12CommandBuffer::end_compute_pass(GPUComputePassEncoder* encoder)
{
    PLACEMENT_DELETE(DX12ComputePassEncoder, static_cast<DX12ComputePassEncoder*>(encoder));
}

void DX12CommandBuffer::transfer_buffer_to_texture(GPUBufferToTextureTransferInfo const& info)
{
    DX12CommandPool const* command_pool = static_cast<DX12CommandPool const*>(m_ref_pool);
    DX12Queue const* queue = static_cast<DX12Queue const*>(command_pool->m_ref_queue);
    DX12Device const* device = static_cast<DX12Device const*>(queue->m_ref_device);
    DX12Buffer const* buffer = static_cast<DX12Buffer const*>(info.src_buffer);
    DX12Texture const* texture = static_cast<DX12Texture const*>(info.dst_texture);

    GPUTextureSubresource const& subresource = info.dst_texture_subresource;
    uint32_t subresource_index = transfer_subresource_index(subresource.mip_level, subresource.base_array_layer,
        0, 1, subresource.array_layers);

    D3D12_RESOURCE_DESC texture_desc = texture->m_resource->GetDesc();
    D3D12_TEXTURE_COPY_LOCATION src_copy{
        .pResource = buffer->m_resource,
        .Type = D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT,
    };
    device->m_device->GetCopyableFootprints(&texture_desc, subresource_index, 1, info.src_buffer_offset, &src_copy.PlacedFootprint, nullptr, nullptr, nullptr);

    src_copy.PlacedFootprint.Offset = info.src_buffer_offset;
    D3D12_TEXTURE_COPY_LOCATION dst_copy{
        .pResource = texture->m_resource,
        .Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX,
        .SubresourceIndex = subresource_index
    };
    m_command_list->CopyTextureRegion(&dst_copy, 0, 0, 0, &src_copy, nullptr);
}

void DX12CommandBuffer::resource_barrier(GPUResourceBarrierInfo const& info)
{
    D3D12_RESOURCE_BARRIER* resource_barriers = static_cast<D3D12_RESOURCE_BARRIER*>(alloca(
        (info.buffer_barriers.size() + info.texture_barriers.size()) * sizeof(D3D12_RESOURCE_BARRIER)));

    uint32_t transition_count = 0;
    for (const GPUBufferBarrier& barrier : info.buffer_barriers)
    {
        D3D12_RESOURCE_BARRIER& resource = resource_barriers[transition_count];
        DX12Buffer const* buffer = static_cast<DX12Buffer const*>(barrier.buffer);
        GPUMemoryUsage memory_usage = buffer->m_info->memory_usage;
        GPUResourceType resource_type = buffer->m_info->type;
        if (memory_usage == GPUMemoryUsage::e_gpu_only || memory_usage == GPUMemoryUsage::e_gpu_to_cpu ||
            (memory_usage == GPUMemoryUsage::e_cpu_to_gpu && (resource_type & GPUResourceTypeFlag::e_rw_buffer)))
        {
            if (barrier.src_state == GPUResourceStateFlag::e_unordered_access &&
                barrier.dst_state == GPUResourceStateFlag::e_unordered_access)
            {
                resource.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;
                resource.UAV.pResource = buffer->m_resource;
                resource.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
            }
            else
            {
                resource.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;
                resource.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
                resource.Transition.pResource = buffer->m_resource;
                resource.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;

                if (barrier.queue_acquire)
                    resource.Transition.StateBefore = D3D12_RESOURCE_STATE_COMMON;
                else
                    resource.Transition.StateBefore = transfer_resource_state(barrier.src_state);

                if (barrier.queue_release)
                    resource.Transition.StateAfter = D3D12_RESOURCE_STATE_COMMON;
                else
                    resource.Transition.StateAfter = transfer_resource_state(barrier.dst_state);
            }
            transition_count++;
        }
    }
    for (const GPUTextureBarrier& barrier : info.texture_barriers)
    {
        D3D12_RESOURCE_BARRIER& resource = resource_barriers[transition_count];
        DX12Texture const* texture = static_cast<DX12Texture const*>(barrier.texture);
        GPUResourceState src_state = texture->m_info->state;
        if (src_state == GPUResourceStateFlag::e_unordered_access &&
            barrier.dst_state == GPUResourceStateFlag::e_unordered_access)
        {
            resource.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;
            resource.UAV.pResource = texture->m_resource;
            resource.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
        }
        else
        {
            resource.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;
            resource.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;
            resource.Transition.pResource = texture->m_resource;
            resource.Transition.Subresource = barrier.subresource_barrier ?
                transfer_subresource_index(barrier.mip_level, barrier.array_layer, 0, texture->m_info->mip_levels, texture->m_info->array_layers) :
                D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;

            if (barrier.queue_acquire)
                resource.Transition.StateBefore = D3D12_RESOURCE_STATE_COMMON;
            else
                resource.Transition.StateBefore = transfer_resource_state(src_state);

            if (barrier.queue_release)
                resource.Transition.StateAfter = D3D12_RESOURCE_STATE_COMMON;
            else
                resource.Transition.StateAfter = transfer_resource_state(barrier.dst_state);

            if (resource.Transition.StateBefore == D3D12_RESOURCE_STATE_COMMON &&
                resource.Transition.StateAfter == D3D12_RESOURCE_STATE_COMMON &&
                (src_state == GPUResourceStateFlag::e_present || barrier.dst_state == GPUResourceStateFlag::e_present))
                continue;
        }
        texture->m_info->state = barrier.dst_state;
        transition_count++;
    }
    if (transition_count)
        m_command_list->ResourceBarrier(transition_count, resource_barriers);
}

void DX12CommandBuffer::generate_mipmap(GPUTexture const* texture, const GPUResourceState& dst_state)
{
    // not a good way to generate mipmap in dx12 like vulkan
    // according to microsoft samples, a compute shader is used
    DX12CommandPool const* dx12_command_pool = static_cast<DX12CommandPool const*>(m_ref_pool);
    DX12Queue const* dx12_queue = static_cast<DX12Queue const*>(dx12_command_pool->m_ref_queue);
    DX12Device const* dx12_device = static_cast<DX12Device const*>(dx12_queue->m_ref_device);
    DX12Texture const* dx12_texture = static_cast<DX12Texture const*>(texture);

    if (dx12_texture->m_info->mip_levels <= 1)
    {
        D3D12_RESOURCE_BARRIER barrier{
            .Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
            .Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE,
            .Transition{
                .pResource = dx12_texture->m_resource,
                .Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES,
                .StateBefore = transfer_resource_state(dx12_texture->m_info->state),
                .StateAfter = transfer_resource_state(dst_state),
            }
        };

        m_command_list->ResourceBarrier(1, &barrier);
    }
    else
    {
        const uint8_t* shader = DX12_Mipmap_Shader;
        GPUShaderLibraryCreateInfo shader_library_info{
            .code = reinterpret_cast<uint32_t const*>(shader),
            .code_size = array_size(DX12_Mipmap_Shader),
            .stage = GPUShaderStageFlag::e_compute
        };
        DX12ShaderLibrary compute_shader(dx12_device, shader_library_info);

        GPUShaderEntry compute_entry{
            .library = &compute_shader,
            .entry = "mipmap",
            .stage = GPUShaderStageFlag::e_compute,
        };

        GPUSamplerCreateInfo sampler_info{
            .min_filter = GPUFilterType::e_linear,
            .mag_filter = GPUFilterType::e_linear,
            .mipmap_mode = GPUMipMapMode::e_linear,
            .address_u = GPUAddressMode::e_clamp_to_edge,
            .address_v = GPUAddressMode::e_clamp_to_edge,
            .address_w = GPUAddressMode::e_clamp_to_edge,
            .compare_mode = GPUCompareMode::e_never,
            .mip_lod_bias = 0.0f,
            .max_anisotropy = 0.0f
        };
        DX12Sampler sampler(dx12_device, sampler_info);

        GPUStaticSampler static_sampler{
            .name = "s_sampler",
            .sampler = &sampler,
        };
        GPURootSignatureCreateInfo root_signature_info{
            .shaders = {compute_entry},
            .static_samplers = {static_sampler},
            .push_constant_names = {"b_push_constant"},
        };
        DX12RootSignature root_signature(dx12_device, root_signature_info);

        GPUComputePipelineCreateInfo compute_pipeline_info{
            .root_signature = &root_signature,
            .compute_shader = &compute_entry
        };
        DX12ComputePipeline compute_pipeline(compute_pipeline_info);

        uint32_t layer_count = dx12_texture->m_info->array_layers;
        uint32_t mip_levels = dx12_texture->m_info->mip_levels;
        if (dx12_texture->m_info->state != GPUResourceStateFlag::e_non_pixel_shader_resource)
        {
            for (uint32_t layer = 0; layer < layer_count; layer++)
            {
                D3D12_RESOURCE_BARRIER barrier{
                    .Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
                    .Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE,
                    .Transition{
                        .pResource = dx12_texture->m_resource,
                        .Subresource = transfer_subresource_index(0, layer, 0, dx12_texture->m_info->mip_levels, dx12_texture->m_info->array_layers),
                        .StateBefore = transfer_resource_state(dx12_texture->m_info->state),
                        .StateAfter = D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE
                    }
                };

                m_command_list->ResourceBarrier(1, &barrier);
            }
        }

        DX12DescriptorHeap::D3D12DescriptorHeap* heap = dx12_device->m_descriptor_heap->m_gpu_cbv_srv_uav_heaps[GPU_Node_Index];

        DX12DescriptorHeap::D3D12DescriptorHandle start_handle{
            .cpu{heap->start_handle.cpu.ptr + (heap->used_descriptor_count + 1) * heap->descriptor_size}, // one offset
            .gpu{heap->start_handle.gpu.ptr + (heap->used_descriptor_count + 1) * heap->descriptor_size},
        };

        DXGI_FORMAT format = transfer_format(dx12_texture->m_info->format, true);
        for (uint32_t layer = 0; layer < layer_count; ++layer)
        {
            D3D12_SHADER_RESOURCE_VIEW_DESC src_desc{
                .Format = format,
                .Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING,
            };

            if (layer_count <= 1)
            {
                src_desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
                src_desc.Texture2D.MostDetailedMip = 0;
                src_desc.Texture2D.MipLevels = mip_levels;
                src_desc.Texture2D.PlaneSlice = 0;
            }
            else
            {
                src_desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2DARRAY;
                src_desc.Texture2DArray.FirstArraySlice = layer;
                src_desc.Texture2DArray.ArraySize = 1;
                src_desc.Texture2DArray.MostDetailedMip = 0;
                src_desc.Texture2DArray.MipLevels = mip_levels;
                src_desc.Texture2DArray.PlaneSlice = 0;
            }

            DX12DescriptorHeap::D3D12DescriptorHandle srv_handle = DX12DescriptorHeap::consume_descriptor_handle(heap, 1);
            dx12_device->m_descriptor_heap->create_srv(dx12_device->m_device, dx12_texture->m_resource, src_desc, srv_handle.cpu);

            for (uint32_t level = 1; level < mip_levels; ++level)
            {
                D3D12_UNORDERED_ACCESS_VIEW_DESC uav_desc{
                    .Format = format,
                };

                if (layer_count <= 1)
                {
                    uav_desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE2D;
                    uav_desc.Texture2D.MipSlice = level;
                    uav_desc.Texture2D.PlaneSlice = 0;
                }
                else
                {
                    uav_desc.ViewDimension = D3D12_UAV_DIMENSION_TEXTURE2DARRAY;
                    uav_desc.Texture2DArray.FirstArraySlice = layer;
                    uav_desc.Texture2DArray.ArraySize = 1;
                    uav_desc.Texture2DArray.MipSlice = level;
                    uav_desc.Texture2DArray.PlaneSlice = 0;
                }

                DX12DescriptorHeap::D3D12DescriptorHandle uav_handle = DX12DescriptorHeap::consume_descriptor_handle(heap, 1);
                dx12_device->m_descriptor_heap->create_uav(dx12_device->m_device, dx12_texture->m_resource, nullptr, uav_desc, uav_handle.cpu);
            }
        }

        m_command_list->SetComputeRootSignature(root_signature.m_root_signature);
        m_command_list->SetPipelineState(compute_pipeline.m_pipeline_state);
        for (uint32_t layer = 0; layer < layer_count; ++layer)
        {
            m_command_list->SetComputeRootDescriptorTable(0, { start_handle.gpu.ptr + heap->descriptor_size * layer * mip_levels });

            uint32_t mip_width = dx12_texture->m_info->width;
            uint32_t mip_height = dx12_texture->m_info->height;
            for (uint32_t mip = 1; mip < mip_levels; ++mip)
            {
                mip_width = std::max(mip_width >> 1, 1u);
                mip_height = std::max(mip_height >> 1, 1u);

                D3D12_RESOURCE_BARRIER uav_mip_barrier{
                    .Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
                    .Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE,
                    .Transition{
                        .pResource = dx12_texture->m_resource,
                        .Subresource = transfer_subresource_index(mip, layer, 0, dx12_texture->m_info->mip_levels, dx12_texture->m_info->array_layers),
                        .StateBefore = transfer_resource_state(dx12_texture->m_info->state),
                        .StateAfter = D3D12_RESOURCE_STATE_UNORDERED_ACCESS
                    }
                };
                m_command_list->ResourceBarrier(1, &uav_mip_barrier);

                uint32_t lod = mip - 1;
                m_command_list->SetComputeRoot32BitConstants(root_signature.m_constant_parameters->index, root_signature.m_constant_parameters->root_parameter.Constants.Num32BitValues, &lod, 0);
                m_command_list->SetComputeRootDescriptorTable(1, { start_handle.gpu.ptr + heap->descriptor_size * (layer * mip_levels + mip) });
                m_command_list->Dispatch((mip_width + 7) / 8, (mip_height + 7) / 8, 1);

                D3D12_RESOURCE_BARRIER uav_barrier{
                    .Type = D3D12_RESOURCE_BARRIER_TYPE_UAV,
                    .Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE,
                    .UAV{
                        .pResource = dx12_texture->m_resource,
                    }
                };
                m_command_list->ResourceBarrier(1, &uav_barrier);

                D3D12_RESOURCE_BARRIER src_mip_barrier{
                    .Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
                    .Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE,
                    .Transition{
                        .pResource = dx12_texture->m_resource,
                        .Subresource = transfer_subresource_index(mip, layer, 0, dx12_texture->m_info->mip_levels, dx12_texture->m_info->array_layers),
                        .StateBefore = D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
                        .StateAfter = D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE
                    }
                };
                m_command_list->ResourceBarrier(1, &src_mip_barrier);
            }
        }

        if (dst_state != GPUResourceStateFlag::e_non_pixel_shader_resource)
        {
            D3D12_RESOURCE_BARRIER barrier{
                .Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
                .Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE,
                .Transition{
                    .pResource = dx12_texture->m_resource,
                    .Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES,
                    .StateBefore = D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
                    .StateAfter = transfer_resource_state(dst_state),
                }
            };
            m_command_list->ResourceBarrier(1, &barrier);
        }

        DX12DescriptorHeap::return_descriptor_handle(heap, start_handle.cpu, mip_levels * layer_count);
    }
}

void DX12CommandBuffer::reset_root_signature(GPUPipelineType type, ID3D12RootSignature* root_signature)
{
    if (m_bound_root_signature != root_signature)
    {
        m_bound_root_signature = root_signature;
        if (type == GPUPipelineType::e_graphics)
            m_command_list->SetGraphicsRootSignature(root_signature);
        else
            m_command_list->SetComputeRootSignature(root_signature);
    }
}


AMAZING_NAMESPACE_END
